{"version":3,"sources":["hooks/useJsonFetch.js","components/Loader.js","components/Data.js","App.js","reportWebVitals.js","index.js"],"names":["useJsonFetch","url","opts","useState","data","setData","error","setError","loading","setLoading","useEffect","loadData","a","fetch","response","ok","Error","statusText","json","errorMessage","message","Loader","className","Data","dataMessage","status","defaultProps","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAgCeA,MA9Bf,SAAsBC,EAAKC,GACzB,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,MAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAwBA,OAtBAC,qBAAU,WACR,IAAMC,EAAQ,uCAAG,gCAAAC,EAAA,6DACfH,GAAW,GADI,kBAIUI,MAAMZ,EAAKC,GAJrB,WAIPY,EAJO,QAKCC,GALD,sBAML,IAAIC,MAAMF,EAASG,YANd,uBAQMH,EAASI,OARf,OAQPd,EARO,OASbC,EAAQD,GATK,kDAWTe,EAA6B,oBAAd,KAAEC,QAAgC,4JAAiC,GACpE,0BAAd,KAAEA,UAAqCD,EAAe,4NAC1DZ,EAASY,GAbI,yBAebV,GAAW,GAfE,6EAAH,qDAkBdE,MACC,IAEI,CAACP,EAAME,EAAOE,I,OClBRa,MATf,WACE,OACE,sBAAKC,UAAU,SAAf,UACE,qBAAKA,UAAU,yBACf,qBAAKA,UAAU,6BCDrB,SAASC,EAAT,GAA8B,IAAdtB,EAAa,EAAbA,IAAKC,EAAQ,EAARA,KACnB,EAA+BF,EAAaC,EAAKC,GAAjD,mBAAOE,EAAP,KAAaE,EAAb,KAAoBE,EAApB,KAEMgB,EAA8B,OAAhBpB,EAAKqB,OAAkB,8FAAqB,GAEhE,OACE,sBAAKH,UAAU,OAAf,UACGd,GAAW,cAAC,EAAD,IACXF,EAAQ,mBAAGgB,UAAU,QAAb,SAAsBhB,IAAa,mBAAGgB,UAAU,OAAb,SAAqBE,OAKvED,EAAKG,aAAe,CAClBzB,IAAK,GACLC,KAAM,IAQOqB,QCfAI,MAVf,WACE,OACE,sBAAKL,UAAU,YAAf,UACE,cAAC,EAAD,CAAMrB,IAAK,+BACX,cAAC,EAAD,CAAMA,IAAK,kCACX,cAAC,EAAD,CAAMA,IAAK,oCCIF2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7db47c8b.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\nfunction useJsonFetch(url, opts) {\n  const [data, setData] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const loadData = async () => {\n      setLoading(true);\n\n      try {\n        const response = await fetch(url, opts);\n        if (!response.ok) {\n          throw new Error(response.statusText);\n        }\n        const data = await response.json();\n        setData(data);\n      } catch (e) {\n        let errorMessage = e.message === \"Failed to fetch\" ? \"Ошибка соединения с сервером\" : \"\";\n        if (e.message === \"Internal Server Error\") errorMessage = \"Упс, произошла ошибка при загрузке данных\";\n        setError(errorMessage);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadData();\n  }, []);\n\n  return [data, error, loading];\n}\n\nexport default useJsonFetch;\n","import React from \"react\";\n\nfunction Loader() {\n  return (\n    <div className=\"loader\">\n      <div className=\"loader__outer-circle\"></div>\n      <div className=\"loader__inner-circle\"></div>\n    </div>\n  );\n}\n\nexport default Loader;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport useJsonFetch from \"../hooks/useJsonFetch\";\nimport Loader from \"./Loader\";\n\nfunction Data({ url, opts }) {\n  const [data, error, loading] = useJsonFetch(url, opts);\n\n  const dataMessage = data.status === \"ok\" ? \"Данные загружены\" : \"\";\n\n  return (\n    <div className=\"card\">\n      {loading && <Loader />}\n      {error ? <p className=\"error\">{error}</p> : <p className=\"data\">{dataMessage}</p>}\n    </div>\n  );\n}\n\nData.defaultProps = {\n  url: \"\",\n  opts: {},\n};\n\nData.propTypes = {\n  url: PropTypes.string,\n  opts: PropTypes.object,\n};\n\nexport default Data;\n","import \"./App.css\";\nimport Data from \"./components/Data\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Data url={\"http://localhost:7070/data\"} />\n      <Data url={\"http://localhost:7070/loading\"} />\n      <Data url={\"http://localhost:7070/error\"} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}